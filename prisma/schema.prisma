generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model casbin_rule {
  id    BigInt  @id @default(autoincrement())
  ptype String? @db.VarChar(100)
  v0    String? @db.VarChar(100)
  v1    String? @db.VarChar(100)
  v2    String? @db.VarChar(100)
  v3    String? @db.VarChar(100)
  v4    String? @db.VarChar(100)
  v5    String? @db.VarChar(100)

  @@unique([ptype, v0, v1, v2, v3, v4, v5], map: "idx_casbin_rule")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_logs {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  user_id       String?   @db.Uuid
  action_type   String    @db.VarChar(50)
  resource_type String    @db.VarChar(50)
  resource_id   String    @db.VarChar(255)
  description   String?
  metadata      Json?
  ip_address    String?   @db.VarChar(45)
  user_agent    String?
  tenant_id     String?   @db.Uuid
  tenants       tenants?  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_audit_logs_tenant")
  users         users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_audit_logs_user")

  @@index([action_type], map: "idx_audit_logs_action_type")
  @@index([deleted_at], map: "idx_audit_logs_deleted_at")
  @@index([resource_type], map: "idx_audit_logs_resource_type")
  @@index([tenant_id], map: "idx_audit_logs_tenant_id")
  @@index([user_id], map: "idx_audit_logs_user_id")
}

model password_reset_tokens {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime? @db.Timestamptz(6)
  updated_at   DateTime? @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  user_id      String    @db.Uuid
  hashed_token String    @unique(map: "uni_password_reset_tokens_hashed_token") @db.VarChar(255)
  expires_at   DateTime  @db.Timestamptz(6)
  users        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_password_reset_tokens_user")

  @@index([deleted_at], map: "idx_password_reset_tokens_deleted_at")
  @@index([expires_at], map: "idx_pwd_reset_expires")
  @@index([hashed_token], map: "idx_pwd_reset_token")
  @@index([user_id], map: "idx_pwd_reset_user")
}

model permissions {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime?          @db.Timestamptz(6)
  updated_at       DateTime?          @db.Timestamptz(6)
  deleted_at       DateTime?          @db.Timestamptz(6)
  name             String             @unique(map: "uni_permissions_name") @db.VarChar(255)
  group_name       String?            @db.VarChar(100)
  description      String?
  role_permissions role_permissions[]

  @@index([deleted_at], map: "idx_permissions_deleted_at")
  @@index([group_name], map: "idx_permissions_group_name")
  @@index([name], map: "idx_permissions_name")
}

model phone_verification_tokens {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime? @db.Timestamptz(6)
  updated_at   DateTime? @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  user_id      String    @db.Uuid
  phone_number String    @db.VarChar(20)
  hashed_token String    @unique(map: "uni_phone_verification_tokens_hashed_token") @db.VarChar(255)
  expires_at   DateTime  @db.Timestamptz(6)
  users        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_phone_verification_tokens_user")

  @@index([deleted_at], map: "idx_phone_verification_tokens_deleted_at")
  @@index([expires_at], map: "idx_phone_verify_expires")
  @@index([phone_number], map: "idx_phone_verify_phone")
  @@index([hashed_token], map: "idx_phone_verify_token")
  @@index([user_id], map: "idx_phone_verify_user")
}

model refresh_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  user_id    String    @db.Uuid
  token      String    @unique(map: "uni_refresh_tokens_token")
  device_id  String?   @db.VarChar(255)
  user_agent String?
  ip_address String?   @db.VarChar(45)
  expires_at DateTime  @db.Timestamptz(6)
  revoked_at DateTime? @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_refresh_tokens_user")

  @@index([deleted_at], map: "idx_refresh_tokens_deleted_at")
  @@index([device_id], map: "idx_refresh_tokens_device_id")
  @@index([expires_at], map: "idx_refresh_tokens_expires_at")
  @@index([token], map: "idx_refresh_tokens_token")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
}

model role_permissions {
  role_id       String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  permission_id String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_permissions_permission")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_permissions_role")

  @@id([role_id, permission_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model roles {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime?          @db.Timestamptz(6)
  updated_at       DateTime?          @db.Timestamptz(6)
  deleted_at       DateTime?          @db.Timestamptz(6)
  tenant_id        String             @db.Uuid
  name             String             @db.VarChar(100)
  description      String?
  is_system_role   Boolean            @default(false)
  role_permissions role_permissions[]
  tenants          tenants            @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tenants_roles")
  user_roles       user_roles[]

  @@unique([tenant_id, name], map: "idx_tenant_role_name")
  @@index([deleted_at], map: "idx_roles_deleted_at")
}

model sessions {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  user_id       String    @db.Uuid
  access_token  String    @unique(map: "uni_sessions_access_token") @db.VarChar(255)
  refresh_token String    @unique(map: "uni_sessions_refresh_token") @db.VarChar(255)
  expires_at    DateTime  @db.Timestamptz(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sessions_user")

  @@index([access_token], map: "idx_sessions_access_token")
  @@index([deleted_at], map: "idx_sessions_deleted_at")
  @@index([expires_at], map: "idx_sessions_expires_at")
  @@index([refresh_token], map: "idx_sessions_refresh_token")
  @@index([user_id], map: "idx_sessions_user_id")
}

model social_profiles {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String  @db.Uuid
  provider         String  @db.VarChar(50)
  provider_user_id String  @db.VarChar(255)
  email            String? @db.VarChar(255)
  name             String? @db.VarChar(255)
  photo_url        String? @db.VarChar(255)
  users            users   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_social_profiles")

  @@unique([provider, provider_user_id], map: "idx_provider_provideruserid")
  @@index([user_id], map: "idx_social_profiles_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tenant_auth_configs {
  tenant_id                String    @id @db.Uuid
  enable_rbac              Boolean   @default(true)
  rbac_config              Json?
  enable_o_auth            Boolean   @default(false)
  o_auth_providers         Json?
  enable_sso               Boolean   @default(false)
  sso_config               Json?
  mfa_policy               String?   @default("disabled") @db.VarChar(50)
  password_policy          Json?
  session_duration_minutes BigInt?   @default(1440)
  created_at               DateTime? @db.Timestamptz(6)
  updated_at               DateTime? @db.Timestamptz(6)
  tenants                  tenants   @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tenant_auth_configs_tenant")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tenant_users {
  user_id    String    @db.Uuid
  tenant_id  String    @db.Uuid
  status     String    @default("active") @db.VarChar(50)
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  tenants    tenants   @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tenants_tenant_memberships")
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_tenant_memberships")

  @@id([user_id, tenant_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tenants {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime?            @db.Timestamptz(6)
  updated_at          DateTime?            @db.Timestamptz(6)
  deleted_at          DateTime?            @db.Timestamptz(6)
  name                String               @db.VarChar(255)
  slug                String               @unique(map: "uni_tenants_slug") @db.VarChar(255)
  owner_user_id       String?              @db.Uuid
  is_active           Boolean              @default(true)
  audit_logs          audit_logs[]
  roles               roles[]
  tenant_auth_configs tenant_auth_configs?
  tenant_users        tenant_users[]
  users               users?               @relation(fields: [owner_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tenants_owner_user")

  @@index([deleted_at], map: "idx_tenants_deleted_at")
  @@index([name], map: "idx_tenants_name")
  @@index([slug], map: "idx_tenants_slug")
}

model user_profiles {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  user_id       String    @unique(map: "uni_user_profiles_user_id") @db.Uuid
  bio           String?
  date_of_birth DateTime? @db.Date
  address       String?
  interests     String[]
  preferences   Json?
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_profile")

  @@index([deleted_at], map: "idx_user_profiles_deleted_at")
}

model user_roles {
  role_id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_roles_role")
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_roles_user")

  @@id([role_id, user_id])
}

model users {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                DateTime?                   @db.Timestamptz(6)
  updated_at                DateTime?                   @db.Timestamptz(6)
  deleted_at                DateTime?                   @db.Timestamptz(6)
  email                     String                      @unique(map: "uni_users_email") @db.VarChar(255)
  password                  String                      @db.VarChar(255)
  first_name                String                      @db.VarChar(100)
  last_name                 String                      @db.VarChar(100)
  status                    String                      @default("pending") @db.VarChar(20)
  email_verified            Boolean                     @default(false)
  email_verified_at         DateTime?                   @db.Timestamptz(6)
  phone_verified            Boolean                     @default(false)
  phone_verified_at         DateTime?                   @db.Timestamptz(6)
  last_login                DateTime?                   @db.Timestamptz(6)
  phone                     String?                     @db.VarChar(20)
  avatar                    String?                     @db.VarChar(255)
  provider                  String?                     @db.VarChar(50)
  provider_id               String?                     @db.VarChar(255)
  is_two_factor_enabled     Boolean                     @default(false)
  two_factor_secret         String?                     @db.VarChar(255)
  two_factor_recovery_codes Json?
  audit_logs                audit_logs[]
  password_reset_tokens     password_reset_tokens[]
  phone_verification_tokens phone_verification_tokens[]
  refresh_tokens            refresh_tokens[]
  sessions                  sessions[]
  social_profiles           social_profiles[]
  tenant_users              tenant_users[]
  tenants                   tenants[]
  user_profiles             user_profiles?
  user_roles                user_roles[]
  verification_tokens       verification_tokens[]

  @@index([deleted_at], map: "idx_users_deleted_at")
  @@index([email], map: "idx_users_email_global")
  @@index([status], map: "idx_users_status_global")
}

model verification_tokens {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime? @db.Timestamptz(6)
  updated_at   DateTime? @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  user_id      String    @db.Uuid
  hashed_token String    @unique(map: "uni_verification_tokens_hashed_token") @db.VarChar(255)
  expires_at   DateTime  @db.Timestamptz(6)
  users        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_verification_tokens_user")

  @@index([deleted_at], map: "idx_verification_tokens_deleted_at")
  @@index([expires_at], map: "idx_verify_expires")
  @@index([hashed_token], map: "idx_verify_token")
  @@index([user_id], map: "idx_verify_user")
}
