generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model event_performers {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime? @db.Timestamptz(6)
  updated_at   DateTime? @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  event_id     String    @db.Uuid
  name         String
  description  String?
  photo_url    String?
  website      String?
  social_media Json?     @default("{}")
  events       events    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_events_performers")

  @@index([deleted_at], map: "idx_event_performers_deleted_at")
  @@index([event_id], map: "idx_performer_event")
  @@index([name], map: "idx_performer_name")
}

model event_photos {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  event_id   String    @db.Uuid
  url        String
  caption    String?
  is_primary Boolean?  @default(false)
  events     events    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_events_photos")

  @@index([event_id], map: "idx_event_photo")
  @@index([deleted_at], map: "idx_event_photos_deleted_at")
}

model event_tickets {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  deleted_at      DateTime? @db.Timestamptz(6)
  event_id        String    @db.Uuid
  name            String
  description     String?
  price           Decimal   @db.Decimal(10, 2)
  currency        String?   @default("USD") @db.VarChar(3)
  quantity        BigInt
  quantity_sold   BigInt?   @default(0)
  sale_start_time DateTime? @db.Timestamptz(6)
  sale_end_time   DateTime? @db.Timestamptz(6)
  status          String?   @default("not_on_sale")
  events          events    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_events_tickets")

  @@index([deleted_at], map: "idx_event_tickets_deleted_at")
  @@index([event_id], map: "idx_ticket_event")
  @@index([name], map: "idx_ticket_name")
  @@index([price], map: "idx_ticket_price")
  @@index([quantity], map: "idx_ticket_quantity")
  @@index([quantity_sold], map: "idx_ticket_sold")
}

model events {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime?          @db.Timestamptz(6)
  updated_at       DateTime?          @db.Timestamptz(6)
  deleted_at       DateTime?          @db.Timestamptz(6)
  venue_id         String             @db.Uuid
  name             String
  description      String?
  category         String
  start_time       DateTime           @db.Timestamptz(6)
  end_time         DateTime           @db.Timestamptz(6)
  timezone         String?            @default("UTC")
  is_recurring     Boolean?           @default(false)
  recurrence_rule  String?
  max_capacity     BigInt?
  ticket_price     Decimal?           @db.Decimal(10, 2)
  is_featured      Boolean?           @default(false)
  is_cancelled     Boolean?           @default(false)
  status           String?            @default("draft")
  event_performers event_performers[]
  event_photos     event_photos[]
  event_tickets    event_tickets[]
  venues           venues             @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_venues_events")

  @@index([category], map: "idx_event_category")
  @@index([name], map: "idx_event_name")
  @@index([start_time, end_time], map: "idx_event_time")
  @@index([venue_id], map: "idx_event_venue")
  @@index([deleted_at], map: "idx_events_deleted_at")
}

model option_choices {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime? @db.Timestamptz(6)
  updated_at       DateTime? @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  option_id        String
  name             String
  description      String?
  price_adjustment Decimal?  @default(0) @db.Decimal(10, 2)
  is_default       Boolean?  @default(false)

  @@index([option_id], map: "idx_option_choice")
  @@index([deleted_at], map: "idx_option_choices_deleted_at")
}

model product_categories {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  venue_id      String    @db.Uuid
  name          String
  description   String?
  display_order BigInt?   @default(0)
  is_active     Boolean?  @default(true)
  venues        venues    @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_venues_categories")

  @@index([is_active], map: "idx_category_active")
  @@index([name], map: "idx_category_name")
  @@index([display_order], map: "idx_category_order")
  @@index([venue_id], map: "idx_category_venue")
  @@index([deleted_at], map: "idx_product_categories_deleted_at")
}

model product_options {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  product_id  String    @db.Uuid
  name        String
  description String?
  required    Boolean?  @default(false)
  min_select  BigInt?   @default(1)
  max_select  BigInt?   @default(1)
  products    products  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_options")

  @@index([product_id], map: "idx_product_option")
  @@index([deleted_at], map: "idx_product_options_deleted_at")
}

model product_photos {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  product_id String    @db.Uuid
  url        String
  caption    String?
  is_primary Boolean?  @default(false)
  products   products  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_photos")

  @@index([product_id], map: "idx_product_photo")
  @@index([deleted_at], map: "idx_product_photos_deleted_at")
}

model products {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime?         @db.Timestamptz(6)
  updated_at       DateTime?         @db.Timestamptz(6)
  deleted_at       DateTime?         @db.Timestamptz(6)
  venue_id         String            @db.Uuid
  category_id      String
  name             String
  description      String?
  category         String
  price            Decimal           @db.Decimal(10, 2)
  discount_price   Decimal?          @db.Decimal(10, 2)
  currency         String?           @default("USD") @db.VarChar(3)
  is_available     Boolean?          @default(true)
  sku              String?
  tags             String[]
  ingredients      String[]
  allergens        String[]
  nutritional_info Json?             @default("{}")
  product_options  product_options[]
  product_photos   product_photos[]
  venues           venues            @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_venues_products")

  @@index([category_id], map: "idx_product_category")
  @@index([name], map: "idx_product_name")
  @@index([category], map: "idx_product_type")
  @@index([venue_id], map: "idx_product_venue")
  @@index([deleted_at], map: "idx_products_deleted_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model table_maps {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  venue_id   String
  name       String
  map_data   Json?     @default("{}")

  @@index([deleted_at], map: "idx_table_maps_deleted_at")
}

model table_positions {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  map_id     String
  table_id   String
  x          BigInt
  y          BigInt
  width      BigInt
  height     BigInt
  rotation   BigInt?   @default(0)

  @@index([deleted_at], map: "idx_table_positions_deleted_at")
}

model tables {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  venue_id    String    @db.Uuid
  name        String
  description String?
  capacity    BigInt
  status      String?   @default("available")
  location    String?
  min_spend   Decimal?  @default(0) @db.Decimal(10, 2)
  table_type  String?   @default("standard")
  is_active   Boolean?  @default(true)
  venues      venues    @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_venues_tables")

  @@index([capacity], map: "idx_table_capacity")
  @@index([name], map: "idx_table_name")
  @@index([status], map: "idx_table_status")
  @@index([venue_id], map: "idx_table_venue")
  @@index([deleted_at], map: "idx_tables_deleted_at")
}

model venue_photos {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  venue_id   String    @db.Uuid
  url        String
  caption    String?
  is_primary Boolean?  @default(false)
  venues     venues    @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_venues_photos")

  @@index([deleted_at], map: "idx_venue_photos_deleted_at")
}

model venue_settings {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime? @db.Timestamptz(6)
  updated_at         DateTime? @db.Timestamptz(6)
  deleted_at         DateTime? @db.Timestamptz(6)
  venue_id           String    @unique(map: "uni_venue_settings_venue_id") @db.Uuid
  timezone           String?   @default("UTC")
  currency           String?   @default("USD") @db.VarChar(3)
  business_hours     Json?     @default("[]")
  booking_settings   Json?     @default("{}")
  loyalty_settings   Json?     @default("{}")
  affiliate_settings Json?     @default("{}")
  venues             venues    @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_venues_settings")

  @@index([deleted_at], map: "idx_venue_settings_deleted_at")
}

model venue_staffs {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  venue_id    String    @db.Uuid
  user_id     String
  role        String
  permissions String[]
  status      String?   @default("active")
  venues      venues    @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_venues_staff")

  @@index([role], map: "idx_staff_role")
  @@index([status], map: "idx_staff_status")
  @@index([user_id], map: "idx_staff_user")
  @@index([venue_id], map: "idx_staff_venue")
  @@index([deleted_at], map: "idx_venue_staffs_deleted_at")
}

model venues {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime?            @db.Timestamptz(6)
  updated_at         DateTime?            @db.Timestamptz(6)
  deleted_at         DateTime?            @db.Timestamptz(6)
  name               String
  description        String?
  address            String
  latitude           Decimal?             @db.Decimal(10, 8)
  longitude          Decimal?             @db.Decimal(11, 8)
  website_url        String?
  phone              String?
  email              String?
  status             String?              @default("pending")
  timezone           String?              @default("UTC")
  currency           String?              @default("USD") @db.VarChar(3)
  is_active          Boolean?             @default(true)
  events             events[]
  product_categories product_categories[]
  products           products[]
  tables             tables[]
  venue_photos       venue_photos[]
  venue_settings     venue_settings?
  venue_staffs       venue_staffs[]

  @@index([address], map: "idx_venue_address")
  @@index([latitude, longitude], map: "idx_venue_location")
  @@index([name], map: "idx_venue_name")
  @@index([status], map: "idx_venue_status")
  @@index([deleted_at], map: "idx_venues_deleted_at")
}

model audit_logs {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  user_id       String?   @db.Uuid
  action_type   String    @db.VarChar(50)
  resource_type String    @db.VarChar(50)
  resource_id   String    @db.VarChar(255)
  description   String?
  metadata      Json?
  ip_address    String?   @db.VarChar(45)
  user_agent    String?
  users         users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_audit_logs_user")

  @@index([action_type], map: "idx_audit_logs_action_type")
  @@index([deleted_at], map: "idx_audit_logs_deleted_at")
  @@index([resource_type], map: "idx_audit_logs_resource_type")
  @@index([user_id], map: "idx_audit_logs_user_id")
}

model refresh_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  user_id    String    @db.Uuid
  token      String    @unique(map: "uni_refresh_tokens_token")
  device_id  String?   @db.VarChar(255)
  user_agent String?
  ip_address String?   @db.VarChar(45)
  expires_at DateTime  @db.Timestamptz(6)
  revoked_at DateTime? @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_refresh_tokens_user")

  @@index([deleted_at], map: "idx_refresh_tokens_deleted_at")
  @@index([device_id], map: "idx_refresh_tokens_device_id")
  @@index([expires_at], map: "idx_refresh_tokens_expires_at")
  @@index([token], map: "idx_refresh_tokens_token")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
}

model roles {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime?    @db.Timestamptz(6)
  updated_at  DateTime?    @db.Timestamptz(6)
  deleted_at  DateTime?    @db.Timestamptz(6)
  name        String       @unique(map: "uni_roles_name") @db.VarChar(100)
  description String?
  permissions String[]
  user_roles  user_roles[]

  @@index([deleted_at], map: "idx_roles_deleted_at")
  @@index([name], map: "idx_roles_name")
}

model sessions {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  user_id       String    @db.Uuid
  access_token  String    @unique(map: "uni_sessions_access_token") @db.VarChar(255)
  refresh_token String    @unique(map: "uni_sessions_refresh_token") @db.VarChar(255)
  expires_at    DateTime  @db.Timestamptz(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sessions_user")

  @@index([access_token], map: "idx_sessions_access_token")
  @@index([deleted_at], map: "idx_sessions_deleted_at")
  @@index([expires_at], map: "idx_sessions_expires_at")
  @@index([refresh_token], map: "idx_sessions_refresh_token")
  @@index([user_id], map: "idx_sessions_user_id")
}

model social_profiles {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime? @db.Timestamptz(6)
  updated_at       DateTime? @db.Timestamptz(6)
  deleted_at       DateTime? @db.Timestamptz(6)
  user_id          String    @db.Uuid
  provider         String    @db.VarChar(50)
  provider_user_id String    @db.VarChar(255)
  email            String?   @db.VarChar(255)
  display_name     String?   @db.VarChar(255)
  photo_url        String?   @db.VarChar(255)
  access_token     String?
  refresh_token    String?
  token_expires_at DateTime? @db.Timestamptz(6)
  raw_data         Json?
  users            users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_social_profiles_user")

  @@index([deleted_at], map: "idx_social_profiles_deleted_at")
  @@index([provider], map: "idx_social_profiles_provider")
  @@index([provider_user_id], map: "idx_social_profiles_provider_user_id")
  @@index([user_id], map: "idx_social_profiles_user_id")
}

model user_profiles {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @db.Timestamptz(6)
  updated_at    DateTime? @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  user_id       String    @unique(map: "uni_user_profiles_user_id") @db.Uuid
  bio           String?
  date_of_birth DateTime? @db.Date
  address       String?
  interests     String[]
  preferences   Json?
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_profile")

  @@index([deleted_at], map: "idx_user_profiles_deleted_at")
}

model user_roles {
  role_id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_roles_role")
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_roles_user")

  @@id([role_id, user_id])
}

model users {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at        DateTime?         @db.Timestamptz(6)
  updated_at        DateTime?         @db.Timestamptz(6)
  deleted_at        DateTime?         @db.Timestamptz(6)
  email             String            @unique(map: "uni_users_email") @db.VarChar(255)
  firebase_uid      String?           @unique(map: "uni_users_firebase_uid") @db.VarChar(128)
  first_name        String            @db.VarChar(100)
  last_name         String            @db.VarChar(100)
  status            String            @default("pending") @db.VarChar(20)
  email_verified    Boolean           @default(false)
  email_verified_at DateTime?         @db.Timestamptz(6)
  last_login        DateTime?         @db.Timestamptz(6)
  phone             String?           @db.VarChar(20)
  avatar            String?           @db.VarChar(255)
  role              String?           @db.VarChar(50)
  provider          String?           @db.VarChar(50)
  provider_id       String?           @db.VarChar(255)
  password          String            @db.VarChar(255)
  audit_logs        audit_logs[]
  refresh_tokens    refresh_tokens[]
  sessions          sessions[]
  social_profiles   social_profiles[]
  user_profiles     user_profiles?
  user_roles        user_roles[]

  @@index([deleted_at], map: "idx_users_deleted_at")
  @@index([email], map: "idx_users_email")
  @@index([firebase_uid], map: "idx_users_firebase_uid")
  @@index([status], map: "idx_users_status")
}

model casbin_rule {
  id    BigInt  @id @default(autoincrement())
  ptype String? @db.VarChar(100)
  v0    String? @db.VarChar(100)
  v1    String? @db.VarChar(100)
  v2    String? @db.VarChar(100)
  v3    String? @db.VarChar(100)
  v4    String? @db.VarChar(100)
  v5    String? @db.VarChar(100)

  @@unique([ptype, v0, v1, v2, v3, v4, v5], map: "idx_casbin_rule")
}

model permissions {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar(100)
  slug        String    @unique(map: "idx_permissions_slug") @db.VarChar(100)
  description String?
  group       String    @db.VarChar(50)
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)

  @@index([group], map: "idx_permissions_group")
}
