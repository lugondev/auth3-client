generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_logs {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?  @db.Uuid
  action_type   String   @db.VarChar(50)
  resource_type String   @db.VarChar(50)
  resource_id   String   @db.VarChar(255)
  description   String?
  metadata      Json?
  ip_address    String?  @db.VarChar(45)
  user_agent    String?
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  users         users?   @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([action_type], map: "idx_audit_logs_action_type")
  @@index([created_at], map: "idx_audit_logs_created_at")
  @@index([resource_type], map: "idx_audit_logs_resource_type")
  @@index([user_id], map: "idx_audit_logs_user_id")
}

model roles {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String       @unique @db.VarChar(100)
  description String?
  permissions String[]
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime     @default(now()) @db.Timestamptz(6)
  user_roles  user_roles[]

  @@index([name], map: "idx_roles_name")
}

model schema_migrations {
  id         String  @id
  applied_at BigInt?
}

model sessions {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String   @db.Uuid
  access_token  String   @unique @db.VarChar(255)
  refresh_token String   @unique @db.VarChar(255)
  expires_at    DateTime @db.Timestamptz(6)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([access_token], map: "idx_sessions_access_token")
  @@index([expires_at], map: "idx_sessions_expires_at")
  @@index([refresh_token], map: "idx_sessions_refresh_token")
  @@index([user_id], map: "idx_sessions_user_id")
}

model user_roles {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String   @db.Uuid
  role_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  roles      roles    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, role_id])
  @@index([role_id], map: "idx_user_roles_role_id")
  @@index([user_id], map: "idx_user_roles_user_id")
}

model users {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String       @unique @db.VarChar(255)
  password_hash  String       @db.VarChar(255)
  first_name     String       @db.VarChar(100)
  last_name      String       @db.VarChar(100)
  status         String       @default("pending") @db.VarChar(20)
  email_verified Boolean      @default(false)
  last_login     DateTime?    @db.Timestamptz(6)
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime     @default(now()) @db.Timestamptz(6)
  audit_logs     audit_logs[]
  sessions       sessions[]
  user_roles     user_roles[]

  @@index([email], map: "idx_users_email")
  @@index([status], map: "idx_users_status")
}
